package com.monopond.api.wrapper;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import com.monopond.api.wrapper.model.DocMerge;
import com.monopond.api.wrapper.model.FaxDocument;
import com.monopond.api.wrapper.model.FaxMessage;
import com.monopond.api.wrapper.model.SaveFaxRequest;
import com.monopond.api.wrapper.model.SendFaxRequest;
import com.monopond.api.wrapper.model.SendFaxResponse;
import com.monopond.api.wrapper.model.StampMerge;
import com.monopond.api.wrapper.translator.SendFaxRequestTranslator;
import com.monopond.api.wrapper.translator.SendFaxResponseTranslator;

public class SendFaxTests {

	private FaxApiService apiService;
	private XmlPrinter printer = new XmlPrinter(System.out);
	
	@Before
	public void setUp() throws FaxApiException {
		String username = "timtest";
		String password = "gnome4life";
		apiService = new FaxApiServiceImpl(username, password, WsdlUrl.LOCAL);
	}
	
	@Test
	public void sendSingleTextFile() throws FaxApiException {
		System.out.println("* Send Single Text File");
		
		String fileName = "test.txt";
		String fileData = "VGhpcyBpcyBhIGZheA==";
		FaxDocument document = new FaxDocument(fileName, fileData);
		
		String messageRef = "send-single-txt";
		String sendTo = "601234678";
		FaxMessage message = new FaxMessage(messageRef, sendTo, Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message), Arrays.asList(document));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
		assertEquals(messageRef, response.getFaxMessages().get(0).getMessageRef());
	}
	
	@Test
	public void sendTomultipleDestinations() throws FaxApiException {
		System.out.println("* Send To Multiple Destinations");
		
		String messageRef = "send-multiple-txt";
		List<FaxMessage> messages = new ArrayList<>();
		messages.add(new FaxMessage(messageRef, "6012345678", Arrays.asList(new FaxDocument("test-1.txt", "VGhpcyBpcyBhbm90aGVyIGZheA=="))));
		messages.add(new FaxMessage(messageRef, "6012345677", Arrays.asList(new FaxDocument("test-2.txt", "YW5vdGhlciB0ZXN0Cg=="))));
		messages.add(new FaxMessage(messageRef, "6012345676", Arrays.asList(new FaxDocument("test-2.txt", "YW5vdGhlciByYW5kb20gdGV4dAo="))));
		
		SendFaxRequest request = new SendFaxRequest(messages);
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(3, response.getFaxMessages().size());
	}
	
	@Test
	public void sendBroadcastDocument() throws FaxApiException {
		System.out.println("* Send Single File To Multiple Destinations (Broadcast)");
		
		String messageRef = "send-broadcast-txt";
		List<FaxMessage> messages = new ArrayList<>();
		messages.add(new FaxMessage(messageRef, "6012345678"));
		messages.add(new FaxMessage(messageRef, "6012345677"));
		messages.add(new FaxMessage(messageRef, "6012345676"));
		
		FaxDocument broadcastDocument = new FaxDocument("test-1.txt", "VGhpcyBpcyBhbm90aGVyIGZheA==");

		SendFaxRequest request = new SendFaxRequest(messages, Arrays.asList(broadcastDocument));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(3, response.getFaxMessages().size());
	}
	
	@Test
	public void sendMSWordDocxWithDocMerge() throws FaxApiException {
		System.out.println("* Send MS Word *.docx file With Doc Merge Field");
		
		FaxDocument document = new FaxDocument("sample.docx", "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");
		List<DocMerge> docMergeData = new ArrayList<>();
		docMergeData.add(new DocMerge("name", "Desmond"));
		document.setDocMergeData(docMergeData);
		
		String messageRef = "send-docmerge-msword";
		FaxMessage message = new FaxMessage(messageRef, "6012345678", Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
	}
	
	@Test
	public void sendMSWordDocWithDocMerge() throws FaxApiException {
		System.out.println("* Send MS Word *.doc file With Doc Merge Field");
		
		FaxDocument document = new FaxDocument("sample.doc", "");
		List<DocMerge> docMergeData = new ArrayList<>();
		docMergeData.add(new DocMerge("name", "Desmond"));
		document.setDocMergeData(docMergeData);
		
		String messageRef = "send-docmerge-msword";
		FaxMessage message = new FaxMessage(messageRef, "6012345678", Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
	}
	
	@Test
	public void sendPdfWithStampMergeImage() throws FaxApiException {
		System.out.println("* Send PDF File With Image Stamp Merge Field");
		
		FaxDocument document = new FaxDocument("hello.pdf", "JVBERi0xLjMKMyAwIG9iago8PC9UeXBlIC9QYWdlCi9QYXJlbnQgMSAwIFIKL1Jlc291cmNlcyAyIDAgUgovQ29udGVudHMgNCAwIFI+PgplbmRvYmoKNCAwIG9iago8PC9GaWx0ZXIgL0ZsYXRlRGVjb2RlIC9MZW5ndGggNzI+PgpzdHJlYW0KeJwzUvDiMtAzNVco53IKUdB3M1QwNNMzMFAISVNwDQEJGRvqGVoqmFuagBSFpChoeKTm5OQrhOcX5aQoaiqEZIHUAQAXNxBXCmVuZHN0cmVhbQplbmRvYmoKMSAwIG9iago8PC9UeXBlIC9QYWdlcwovS2lkcyBbMyAwIFIgXQovQ291bnQgMQovTWVkaWFCb3ggWzAgMCA1OTUuMjggODQxLjg5XQo+PgplbmRvYmoKNSAwIG9iago8PC9UeXBlIC9Gb250Ci9CYXNlRm9udCAvSGVsdmV0aWNhLUJvbGQKL1N1YnR5cGUgL1R5cGUxCi9FbmNvZGluZyAvV2luQW5zaUVuY29kaW5nCj4+CmVuZG9iagoyIDAgb2JqCjw8Ci9Qcm9jU2V0IFsvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJXQovRm9udCA8PAovRjEgNSAwIFIKPj4KL1hPYmplY3QgPDwKPj4KPj4KZW5kb2JqCjYgMCBvYmoKPDwKL1Byb2R1Y2VyIChGUERGIDEuNykKL0NyZWF0aW9uRGF0ZSAoRDoyMDE0MDYxMDEyMjQxMikKPj4KZW5kb2JqCjcgMCBvYmoKPDwKL1R5cGUgL0NhdGFsb2cKL1BhZ2VzIDEgMCBSCj4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAyMjggMDAwMDAgbiAKMDAwMDAwMDQxNiAwMDAwMCBuIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwODcgMDAwMDAgbiAKMDAwMDAwMDMxNSAwMDAwMCBuIAowMDAwMDAwNTIwIDAwMDAwIG4gCjAwMDAwMDA1OTUgMDAwMDAgbiAKdHJhaWxlcgo8PAovU2l6ZSA4Ci9Sb290IDcgMCBSCi9JbmZvIDYgMCBSCj4+CnN0YXJ0eHJlZgo2NDQKJSVFT0YK");
		List<StampMerge> stampMergeData = new ArrayList<>();
		StampMerge stampMerge = new StampMerge();
		stampMerge.setKey(new StampMerge.Key(223, 321));
		stampMerge.setImageValue(new StampMerge.Image("approve.png", ""));
		stampMergeData.add(stampMerge);
		
		String messageRef = "send-stampmerge-pdf";
		FaxMessage message = new FaxMessage(messageRef, "6012345678", Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
	}

	@Test
	public void sendPdfWithStampMergeText() throws FaxApiException {
		System.out.println("* Send PDF File With Text Stamp Merge Field");
		
		FaxDocument document = new FaxDocument("hello.pdf", "JVBERi0xLjMKMyAwIG9iago8PC9UeXBlIC9QYWdlCi9QYXJlbnQgMSAwIFIKL1Jlc291cmNlcyAyIDAgUgovQ29udGVudHMgNCAwIFI+PgplbmRvYmoKNCAwIG9iago8PC9GaWx0ZXIgL0ZsYXRlRGVjb2RlIC9MZW5ndGggNzI+PgpzdHJlYW0KeJwzUvDiMtAzNVco53IKUdB3M1QwNNMzMFAISVNwDQEJGRvqGVoqmFuagBSFpChoeKTm5OQrhOcX5aQoaiqEZIHUAQAXNxBXCmVuZHN0cmVhbQplbmRvYmoKMSAwIG9iago8PC9UeXBlIC9QYWdlcwovS2lkcyBbMyAwIFIgXQovQ291bnQgMQovTWVkaWFCb3ggWzAgMCA1OTUuMjggODQxLjg5XQo+PgplbmRvYmoKNSAwIG9iago8PC9UeXBlIC9Gb250Ci9CYXNlRm9udCAvSGVsdmV0aWNhLUJvbGQKL1N1YnR5cGUgL1R5cGUxCi9FbmNvZGluZyAvV2luQW5zaUVuY29kaW5nCj4+CmVuZG9iagoyIDAgb2JqCjw8Ci9Qcm9jU2V0IFsvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJXQovRm9udCA8PAovRjEgNSAwIFIKPj4KL1hPYmplY3QgPDwKPj4KPj4KZW5kb2JqCjYgMCBvYmoKPDwKL1Byb2R1Y2VyIChGUERGIDEuNykKL0NyZWF0aW9uRGF0ZSAoRDoyMDE0MDYxMDEyMjQxMikKPj4KZW5kb2JqCjcgMCBvYmoKPDwKL1R5cGUgL0NhdGFsb2cKL1BhZ2VzIDEgMCBSCj4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAyMjggMDAwMDAgbiAKMDAwMDAwMDQxNiAwMDAwMCBuIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwODcgMDAwMDAgbiAKMDAwMDAwMDMxNSAwMDAwMCBuIAowMDAwMDAwNTIwIDAwMDAwIG4gCjAwMDAwMDA1OTUgMDAwMDAgbiAKdHJhaWxlcgo8PAovU2l6ZSA4Ci9Sb290IDcgMCBSCi9JbmZvIDYgMCBSCj4+CnN0YXJ0eHJlZgo2NDQKJSVFT0YK");
		List<StampMerge> stampMergeData = new ArrayList<>();
		StampMerge stampMerge = new StampMerge();
		stampMerge.setKey(new StampMerge.Key(223, 321));
		String fontStyle = "Times-Roman";
		BigDecimal fontSizePts = new BigDecimal("21.5");
		stampMerge.setTextValue(new StampMerge.Text("I'm The StampMerge", fontStyle, fontSizePts));
		stampMergeData.add(stampMerge);
		
		String messageRef = "send-stampmerge-pdf";
		FaxMessage message = new FaxMessage(messageRef, "6012345678", Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
	}
	
	@Test
	public void sendTiffWithStampMergeImage() throws FaxApiException {
		System.out.println("* Send TIFF File With Image Stamp Merge Field");
		
		FaxDocument document = new FaxDocument("sample.tiff", "");
		List<StampMerge> stampMergeData = new ArrayList<>();
		StampMerge stampMerge = new StampMerge();
		stampMerge.setKey(new StampMerge.Key(223, 321));
		stampMerge.setImageValue(new StampMerge.Image("approve.png", "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"));
		stampMergeData.add(stampMerge);
		
		String messageRef = "send-stampmerge-pdf";
		FaxMessage message = new FaxMessage(messageRef, "6012345678", Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
	}

	@Test
	public void sendTiffWithStampMergeText() throws FaxApiException {
		System.out.println("* Send TIFF File With Text Stamp Merge Field");
		
		FaxDocument document = new FaxDocument("sample.tiff", "");
		List<StampMerge> stampMergeData = new ArrayList<>();
		StampMerge stampMerge = new StampMerge();
		stampMerge.setKey(new StampMerge.Key(223, 321));
		String fontStyle = "Times-Roman";
		BigDecimal fontSizePts = new BigDecimal("21.5");
		stampMerge.setTextValue(new StampMerge.Text("I'm The StampMerge", fontStyle, fontSizePts));
		stampMergeData.add(stampMerge);
		
		String messageRef = "send-stampmerge-pdf";
		FaxMessage message = new FaxMessage(messageRef, "6012345678", Arrays.asList(document));
		
		SendFaxRequest request = new SendFaxRequest(Arrays.asList(message));
		printer.print(new SendFaxRequestTranslator(), request);
		
		SendFaxResponse response = apiService.sendFax(request);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
	}
	
	@Test(expected = FaxApiException.class)
	public void sendNonDocOrNonDocxWithDocMergeData() throws FaxApiException {
		System.out.println("* Send Non-Doc(x) File With Doc Merge Data");
		
		String fileName = "test.txt";
		String fileData = "VGhpcyBpcyBhIGZheA==";
		
		FaxDocument document = new FaxDocument(fileName, fileData);
		List<DocMerge> docMergeData = new ArrayList<>();
		docMergeData.add(new DocMerge("name", "Desmond"));
		document.setDocMergeData(docMergeData);
		
		String messageRef = "send-nondoc-docmerge";
		String sendTo = "601234678";
		FaxMessage message = new FaxMessage(messageRef, sendTo, Arrays.asList(document));
		
		SendFaxRequest sendRequest = new SendFaxRequest(Arrays.asList(message), Arrays.asList(document));
		printer.print(new SendFaxRequestTranslator(), sendRequest);
		
		SendFaxResponse response = apiService.sendFax(sendRequest);
		printer.print(new SendFaxResponseTranslator(), response);
	}
	
	@Test
	public void sendFromSavedDocument() throws FaxApiException {
		System.out.println("* Send From Saved Fax Document");
		
		String documentRef = "my-saved-txt-file-" + System.currentTimeMillis(); // DocumentRef must be unique
		String fileName = "test.txt";
		String fileData = "VGhpcyBpcyBhIGZheA==";
		SaveFaxRequest saveRequest = new SaveFaxRequest(documentRef, fileName, fileData);
		apiService.saveFaxDocument(saveRequest);
		
		FaxDocument document = new FaxDocument(documentRef);
		
		String messageRef = "send-saved-txt";
		String sendTo = "601234678";
		FaxMessage message = new FaxMessage(messageRef, sendTo, Arrays.asList(document));
		
		SendFaxRequest sendRequest = new SendFaxRequest(Arrays.asList(message), Arrays.asList(document));
		printer.print(new SendFaxRequestTranslator(), sendRequest);
		
		SendFaxResponse response = apiService.sendFax(sendRequest);
		printer.print(new SendFaxResponseTranslator(), response);
		
		assertEquals(1, response.getFaxMessages().size());
		assertEquals(messageRef, response.getFaxMessages().get(0).getMessageRef());
	}
	
	@Test(expected = FaxApiException.class)
	public void sendFromSavedDocumentAndInputFile() throws FaxApiException {
		System.out.println("* Send From Saved Fax Document and Input File");
		
		String documentRef = "my-saved-txt-file-" + System.currentTimeMillis(); // DocumentRef must be unique
		String fileName = "test.txt";
		String fileData = "VGhpcyBpcyBhIGZheA==";
		SaveFaxRequest saveRequest = new SaveFaxRequest(documentRef, fileName, fileData);
		apiService.saveFaxDocument(saveRequest);
		
		FaxDocument document = new FaxDocument(documentRef);
		// Can't have documentRef and fileName-fileData in a document
		document.setFileName(fileName);
		document.setFileData(fileData);
		
		String messageRef = "send-saved-and-input-txt";
		String sendTo = "601234678";
		FaxMessage message = new FaxMessage(messageRef, sendTo, Arrays.asList(document));
		
		SendFaxRequest sendRequest = new SendFaxRequest(Arrays.asList(message), Arrays.asList(document));
		printer.print(new SendFaxRequestTranslator(), sendRequest);
		
		SendFaxResponse response = apiService.sendFax(sendRequest);
		printer.print(new SendFaxResponseTranslator(), response);
	}
}
